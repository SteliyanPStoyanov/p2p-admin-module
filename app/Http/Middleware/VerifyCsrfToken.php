<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Foundation\Http\Middleware\VerifyCsrfToken as Middleware;
use Illuminate\Support\Str;

class VerifyCsrfToken extends Middleware
{
    public const ADMIN_CSRF_TOKEN_NAME = '_token_admin';

    /**
     * Indicates whether the XSRF-TOKEN cookie should be set on the response.
     *
     * @var bool
     */
    protected $addHttpCookie = true;

    /**
     * The URIs that should be excluded from CSRF verification.
     *
     * @var array
     */
    protected $except = [
        //
    ];

    /**
     * @param \Illuminate\Http\Request $request
     * @param Closure $next
     *
     * @return mixed
     *
     * @throws \Illuminate\Session\TokenMismatchException
     */
    public function handle($request, Closure $next)
    {
        if (!$request->session()->has(self::ADMIN_CSRF_TOKEN_NAME)) {
            $request->session()->put(self::ADMIN_CSRF_TOKEN_NAME, $this->regenerateToken());
        }

        return parent::handle($request, $next); // TODO: Change the autogenerated stub
    }

    /**
     * Determine if the session and input CSRF tokens match.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return bool
     */
    protected function tokensMatch($request)
    {
        $adminPrefix = config('app.admin_prefix', 'admin');

        if ($request->is($adminPrefix . '/*')) {
            $token = $request->input(self::ADMIN_CSRF_TOKEN_NAME);

            return is_string($request->session()->get(self::ADMIN_CSRF_TOKEN_NAME)) &&
                is_string($token) &&
                hash_equals($request->session()->get(self::ADMIN_CSRF_TOKEN_NAME), $token);
        }

        return parent::tokensMatch($request);
    }

    /**
     * @return string
     */
    protected function regenerateToken()
    {
        return Str::random(40);
    }
}
